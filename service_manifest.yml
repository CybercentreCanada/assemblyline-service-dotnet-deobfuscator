name: DotnetDeobfuscator
version: $SERVICE_TAG
description: This Assemblyline service tries to deobfuscate .Net dlls.

# Regex defining the types of files the service accepts and rejects
accepts: executable/windows/.*
rejects: empty|executable/windows/dos

# At which stage the service should run (one of FILTER, EXTRACT, CORE, SECONDARY, POST, REVIEW)
# NOTE: Stages are executed in the order defined in the list
stage: CORE
# Which category the service is part of (one of Antivirus, Dynamic Analysis, External, Extraction, Filtering, Internet Connected, Networking, Static Analysis)
category: Static Analysis

# Does the service require access to the file to perform its task
# If set to false, the service will only have access to the file metadata (e.g. Hashes, size, type, ...)
file_required: true
# Maximum execution time the service has before it's considered to be timed out
timeout: 60

# is the service enabled by default
enabled: true

# Service heuristic blocks: List of heuristic objects that define the different heuristics used in the service
heuristics:
  - heur_id: 1
    name: DotNet Obfuscator Found
    score: 500
    filetype: executable/windows/
    description: If at least one obfuscator was detected, there is a high chance that this is an interesting sample.

# Docker configuration block which defines:
#  - the name of the docker container that will be created
#  - CPU and ram allocation by the container
docker_config:
  image: ${REGISTRY}cccs/assemblyline-service-dotnet-deobfuscator:$SERVICE_TAG
  cpu_cores: 1.0
  ram_mb: 1024
